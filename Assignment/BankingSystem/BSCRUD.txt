-- Create the tables

-- Table for storing customer information
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(100)
);

-- Table for storing account information
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY,
    CustomerID INT,
    AccountType VARCHAR(50),
    Balance DECIMAL(15, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Insert sample data into Customers table
INSERT INTO Customers (CustomerID, FirstName, LastName, Email)
VALUES 
(1, 'John', 'Doe', 'john.doe@example.com'),
(2, 'Jane', 'Smith', 'jane.smith@example.com');

-- Insert sample data into Accounts table
INSERT INTO Accounts (AccountID, CustomerID, AccountType, Balance)
VALUES 
(101, 1, 'Checking', 5000.00),
(102, 2, 'Savings', 2000.00);

-- SELECT all customers
SELECT * FROM Customers;

-- SELECT customers with a specific last name
SELECT FirstName, LastName FROM Customers WHERE LastName = 'Doe';

-- SELECT accounts and their balances
SELECT AccountID, Balance FROM Accounts;

-- UPDATE the balance of an account (withdrawal example)
UPDATE Accounts 
SET Balance = Balance - 100.00 
WHERE AccountID = 101;

-- DELETE an account
DELETE FROM Accounts 
WHERE AccountID = 102;

-- Use an aggregate function to find the total balance across all accounts
SELECT SUM(Balance) AS TotalBalance FROM Accounts;

-- Using a simple condition to filter accounts with balance greater than 1000
SELECT AccountID, Balance 
FROM Accounts 
WHERE Balance > 1000;

-- Use of UNION to combine customer and account data
SELECT FirstName, LastName FROM Customers
UNION
SELECT 'Account', AccountType FROM Accounts;

-- Basic example of using LIKE to find customers with a name starting with 'J'
SELECT * 
FROM Customers 
WHERE FirstName LIKE 'J%';

