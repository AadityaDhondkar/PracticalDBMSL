Here's a simple example of implementing MongoDB database connectivity using **Node.js** for the backend and **React** for the frontend to handle basic database operations such as **add, delete, edit, and fetch**. 

In this example:
- **Node.js and Express** act as the backend server, connecting to MongoDB using **Mongoose**.
- **React** serves as the frontend interface to navigate through the database records.

### Prerequisites
- Install [MongoDB](https://www.mongodb.com/try/download/community) and ensure it's running.
- Set up a MongoDB database and collection.
- Install **Node.js** and **npm**.
  
### Step 1: Backend (Node.js and Express with MongoDB using Mongoose)

#### 1. Install required packages
Open a terminal in your project directory and run:
```bash
npm init -y
npm install express mongoose body-parser cors
```

#### 2. Create `server.js` for backend code

```javascript
// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/mydatabase', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => console.log('Connected to MongoDB'));

// Define a Mongoose Schema and Model
const itemSchema = new mongoose.Schema({
  name: String,
  description: String,
});

const Item = mongoose.model('Item', itemSchema);

// CRUD API endpoints
// 1. Add Item
app.post('/api/items', async (req, res) => {
  const newItem = new Item(req.body);
  await newItem.save();
  res.json(newItem);
});

// 2. Fetch Items
app.get('/api/items', async (req, res) => {
  const items = await Item.find();
  res.json(items);
});

// 3. Update Item
app.put('/api/items/:id', async (req, res) => {
  const updatedItem = await Item.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(updatedItem);
});

// 4. Delete Item
app.delete('/api/items/:id', async (req, res) => {
  await Item.findByIdAndDelete(req.params.id);
  res.json({ message: 'Item deleted' });
});

// Start server
app.listen(5000, () => console.log('Server is running on port 5000'));
```

### Step 2: Frontend (React App)

1. Create a React app (if you haven't already):
   ```bash
   npx create-react-app frontend
   cd frontend
   npm install axios
   ```

2. Replace `App.js` with the following code:

```javascript
// src/App.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function App() {
  const [items, setItems] = useState([]);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [editId, setEditId] = useState(null);

  // Fetch items
  const fetchItems = async () => {
    const response = await axios.get('http://localhost:5000/api/items');
    setItems(response.data);
  };

  useEffect(() => {
    fetchItems();
  }, []);

  // Add or Update item
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (editId) {
      await axios.put(`http://localhost:5000/api/items/${editId}`, { name, description });
    } else {
      await axios.post('http://localhost:5000/api/items', { name, description });
    }
    setName('');
    setDescription('');
    setEditId(null);
    fetchItems();
  };

  // Edit item
  const handleEdit = (item) => {
    setEditId(item._id);
    setName(item.name);
    setDescription(item.description);
  };

  // Delete item
  const handleDelete = async (id) => {
    await axios.delete(`http://localhost:5000/api/items/${id}`);
    fetchItems();
  };

  return (
    <div className="App">
      <h1>Item Manager</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          type="text"
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <button type="submit">{editId ? 'Update' : 'Add'} Item</button>
      </form>

      <ul>
        {items.map((item) => (
          <li key={item._id}>
            <strong>{item.name}</strong>: {item.description}
            <button onClick={() => handleEdit(item)}>Edit</button>
            <button onClick={() => handleDelete(item._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

### Step 3: Running the Application

1. Start the backend server:
   ```bash
   node server.js
   ```

2. Start the React frontend:
   ```bash
   npm start
   ```

Now, you should be able to perform **Add, Edit, Delete**, and **Fetch** operations using the React interface, with data stored in MongoDB.